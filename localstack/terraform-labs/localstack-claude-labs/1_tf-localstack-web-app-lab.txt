# main.tf

provider "aws" {
  region                      = "us-east-1"
  access_key                  = "test"
  secret_key                  = "test"
  skip_credentials_validation = true
  skip_metadata_api_check     = true
  skip_requesting_account_id  = true

  # LocalStack endpoint
  endpoints {
    ec2            = "http://localhost:4566"
    s3             = "http://localhost:4566"
    route53        = "http://localhost:4566"
    iam            = "http://localhost:4566"
    dynamodb       = "http://localhost:4566"
  }
}

# VPC and Network Setup
resource "aws_vpc" "web_app_vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "web-app-vpc"
  }
}

resource "aws_subnet" "web_app_subnet" {
  vpc_id            = aws_vpc.web_app_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"

  tags = {
    Name = "web-app-subnet"
  }
}

resource "aws_internet_gateway" "web_app_igw" {
  vpc_id = aws_vpc.web_app_vpc.id

  tags = {
    Name = "web-app-igw"
  }
}

resource "aws_route_table" "web_app_route_table" {
  vpc_id = aws_vpc.web_app_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.web_app_igw.id
  }

  tags = {
    Name = "web-app-route-table"
  }
}

resource "aws_route_table_association" "web_app_route_table_assoc" {
  subnet_id      = aws_subnet.web_app_subnet.id
  route_table_id = aws_route_table.web_app_route_table.id
}

resource "aws_security_group" "web_app_sg" {
  name        = "web-app-sg"
  description = "Security group for web application"
  vpc_id      = aws_vpc.web_app_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "web-app-sg"
  }
}

# IAM Role and Policy for EC2 to access S3
resource "aws_iam_role" "web_app_role" {
  name = "web-app-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Name = "web-app-role"
  }
}

resource "aws_iam_policy" "s3_access_policy" {
  name        = "s3-access-policy"
  description = "Policy for EC2 to access S3 bucket"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "s3:GetObject",
          "s3:ListBucket"
        ]
        Effect   = "Allow"
        Resource = [
          aws_s3_bucket.web_app_bucket.arn,
          "${aws_s3_bucket.web_app_bucket.arn}/*"
        ]
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "s3_access_attach" {
  role       = aws_iam_role.web_app_role.name
  policy_arn = aws_iam_policy.s3_access_policy.arn
}

resource "aws_iam_instance_profile" "web_app_profile" {
  name = "web-app-profile"
  role = aws_iam_role.web_app_role.name
}

# S3 Bucket for Web Content
resource "aws_s3_bucket" "web_app_bucket" {
  bucket = "web-app-content-bucket"
  force_destroy = true
}

resource "aws_s3_bucket_ownership_controls" "web_app_bucket_ownership" {
  bucket = aws_s3_bucket.web_app_bucket.id
  rule {
    object_ownership = "BucketOwnerPreferred"
  }
}

resource "aws_s3_bucket_public_access_block" "web_app_bucket_public_access" {
  bucket = aws_s3_bucket.web_app_bucket.id

  block_public_acls       = false
  block_public_policy     = false
  ignore_public_acls      = false
  restrict_public_buckets = false
}

resource "aws_s3_bucket_acl" "web_app_bucket_acl" {
  depends_on = [
    aws_s3_bucket_ownership_controls.web_app_bucket_ownership,
    aws_s3_bucket_public_access_block.web_app_bucket_public_access,
  ]

  bucket = aws_s3_bucket.web_app_bucket.id
  acl    = "public-read"
}

# Upload sample content to S3
resource "aws_s3_object" "index_html" {
  bucket = aws_s3_bucket.web_app_bucket.id
  key    = "index.html"
  content = <<EOT
<!DOCTYPE html>
<html>
<head>
    <title>Simple Web Application</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f0f0f0;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>Welcome to the Simple Web Application</h1>
    <div class="container">
        <p>This is a simple web application hosted on EC2 with content from S3.</p>
        <p>LocalStack Lab demonstration with Terraform.</p>
    </div>
</body>
</html>
EOT
  content_type = "text/html"
  acl = "public-read"
}

resource "aws_s3_object" "app_js" {
  bucket = aws_s3_bucket.web_app_bucket.id
  key    = "app.js"
  content = <<EOT
console.log("Web application loaded successfully!");
document.addEventListener('DOMContentLoaded', function() {
    const container = document.querySelector('.container');
    const paragraph = document.createElement('p');
    paragraph.textContent = 'This content was added dynamically using JavaScript.';
    container.appendChild(paragraph);
});
EOT
  content_type = "application/javascript"
  acl = "public-read"
}

# EC2 Instance
resource "aws_instance" "web_server" {
  ami           = "ami-12345678" # This is a dummy AMI ID for LocalStack
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.web_app_subnet.id
  vpc_security_group_ids = [aws_security_group.web_app_sg.id]
  iam_instance_profile = aws_iam_instance_profile.web_app_profile.name

  user_data = <<-EOF
              #!/bin/bash
              echo "Setting up web server"
              mkdir -p /var/www/html
              echo "Downloading content from S3"
              aws s3 cp s3://${aws_s3_bucket.web_app_bucket.id}/index.html /var/www/html/index.html
              aws s3 cp s3://${aws_s3_bucket.web_app_bucket.id}/app.js /var/www/html/app.js
              echo "Installing nginx"
              apt-get update
              apt-get install -y nginx
              service nginx start
              EOF

  tags = {
    Name = "web-server"
  }
}

# Route 53 Setup
resource "aws_route53_zone" "web_app_zone" {
  name = "webapp.local"

  vpc {
    vpc_id = aws_vpc.web_app_vpc.id
  }
}

resource "aws_route53_record" "web_app_record" {
  zone_id = aws_route53_zone.web_app_zone.zone_id
  name    = "app.webapp.local"
  type    = "A"
  ttl     = "300"
  records = [aws_instance.web_server.private_ip]
}

# Output Values
output "vpc_id" {
  value = aws_vpc.web_app_vpc.id
}

output "subnet_id" {
  value = aws_subnet.web_app_subnet.id
}

output "security_group_id" {
  value = aws_security_group.web_app_sg.id
}

output "s3_bucket_name" {
  value = aws_s3_bucket.web_app_bucket.id
}

output "s3_bucket_arn" {
  value = aws_s3_bucket.web_app_bucket.arn
}

output "ec2_instance_id" {
  value = aws_instance.web_server.id
}

output "ec2_instance_private_ip" {
  value = aws_instance.web_server.private_ip
}

output "route53_zone_id" {
  value = aws_route53_zone.web_app_zone.zone_id
}

output "route53_zone_name" {
  value = aws_route53_zone.web_app_zone.name
}

output "route53_record_name" {
  value = aws_route53_record.web_app_record.name
}

output "iam_role_arn" {
  value = aws_iam_role.web_app_role.arn
}

output "iam_policy_arn" {
  value = aws_iam_policy.s3_access_policy.arn
}
